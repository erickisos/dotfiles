#+title: Doom Configuration

This file contains all the specific doom configuration in a literate programming manner, this means that the code writted here is the one that would be used by default to autogenerate all the emacs config files.

First of all, we define the main preference which is in the way of how do I prefer having my emacs window when is recently opened, in this case the line is:
#+begin_src emacs-lisp :tangle ../.doom.d/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

The next code-block incluldes my default config for the main details, my identity on this computer and the location of basic projects
#+begin_src emacs-lisp :tangle ../.doom.d/config.el
(setq user-full-name                 "Erick G. Islas Osuna"
      user-mail-address              "erickisos653@gmail.com"
      doom-theme                     'doom-one
      org-directory                  "~/Documents/Cloud/Notes/"
      display-line-numbers-type      t
      projectile-project-search-path '("~/Documents/Github")
      evil-split-window-below        t
      evil-vsplit-window-right       t
      doom-font                      (font-spec :family "Fira Code" :size 11)
      doom-themes-treemacs-theme     "all-the-icons"
      ispell-dictionary              "es")
#+end_src

And given that we are already using this weird thing called =doom-themes-treemacs= this would be the best starting point to present my main packages.

#+begin_src emacs-lisp :tangle ../.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! treemacs-all-the-icons)
#+end_src

also, just to avoid having all versions of related packages we have this configuration
#+begin_src emacs-lisp :tangle ../.doom.d/packages.el
(unpin! treemacs)
(unpin! lsp-ui)
(unpin! lsp-mode)
(unpin! lsp-treemacs)
#+end_src

going back into the config, we have the next lines, which would set main features for treemacs and lsp-mode
#+begin_src emacs-lisp :tangle ../.doom.d/config.el
(use-package! treemacs-all-the-icons
  :after treemacs)

(use-package! lsp-mode
  :commands lsp
  :config
  (setq lsp-headerline-breadcrumb-enable   t
        lsp-lens-enable                    t
        lsp-signature-render-documentation nil
        lsp-idle-delay                     0.1
        lsp-ui-sideline-enable             nil
        lsp-completion-use-last-result     nil)
  (advice-add #'lsp-rename
              :after (lambda (&rest _) (projectile-save-project-buffers))))

(use-package! lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable  nil
        lsp-ui-peek-enable nil))

(use-package! lsp-treemacs
  :config
  (setq lsp-treemacs-error-list-current-project-only t))
#+end_src

the next steps are the packages needed to handle some extra minor modes
#+begin_src emacs-lisp :tangle ../.doom.d/packages.el
(package! paredit)
(package! posframe)
(package! scss-mode)
(package! company-quickhelp)

(unpin! hover)
(unpin! lsp-dart)

(package! lsp-metals)
(package! map :pin "bb50dba")
(package! company-tabnine)
#+end_src

The next section is to add support of spice directly on org-mode
#+begin_src emacs-lisp :tangle ../.doom.d/packages.el
(package! spice-mode)
(package! ob-spice)
#+end_src

as you can see, we have some new packages around metals, dart and tabnine, so we need to define some extra configurations on the doom side
#+begin_src emacs-lisp :tangle ../.doom.d/config.el
(use-package! clojure-mode
  :config
  (setq clojure-indent-style 'align-arguments))

(use-package! company
  :init
  (company-quickhelp-mode)
  :config
  (setq company-quickhelp-delay                nil
        company-quickhelp-use-propertized-text t
        company-quickhelp-max-lines            10))

(use-package! lsp-dart
  :after dart-mode
  :config
  (setq lsp-dart-dap-flutter-hot-reload-on-save t))

(use-package! cider
  :after clojure-mode
  :config
  (setq cider-show-error-buffer                 t   ;; to keep errors only at the REPL
        cider-font-lock-dynamically             nil
        cider-eldoc-display-for-symbol-at-point nil
        cider-prompt-for-symbol                 nil
        cider-use-xref                          nil)
  (set-lookup-handlers! '(cider-mode cider-repl-mode) nil)
  (add-hook 'cider-mode-hook (lambda () (remove-hook 'completion-at-point-functions #'cider-complete-at-point))))

(use-package! clj-refactor
  :after clojure-mode
  :config
  (set-lookup-handlers! 'clj-refactor-mode nil)
  (setq cljr-warn-on-eval nil
        cljr-magic-require-namespaces '(("s" . "schema.core")
                                        ("st" . "schema.test")
                                        ("m" . "matcher-combinators.matchers")
                                        ("pp" . "clojure.pprint"))))

(use-package! lsp-java
  :after java-mode
  :config
  (setq lsp-java-references-code-lens-enabled      t
        lsp-java-implementations-code-lens-enabled t))

(use-package! paredit
  :hook ((clojure-mode . paredit-mode)
         (emacs-lisp-mode . paredit-mode)))

(use-package! org-tree-slide
  :after org-mode
  :config
  (setq +org-present-text-scale              2
        org-tree-slide-skip-outline-level    2
        org-tree-slide-slide-in-effect       t
        org-tree-slide-modeline-display      'outside
        org-tree-slide-fold-subtrees-skipped nil))

(use-package! company-tabnine
  :config
  (add-to-list 'company-backends #'company-tabnine)
  (setq company-idle-delay        0
        company-show-quick-access t))
#+end_src

* ERC

Here we have the main configurations for ERC (default Emacs IRC client)

#+begin_src emacs-lisp :tangle ../.doom.d/config.el
(map! :leader
      (:prefix ("e" . "evaluate/ERC/EWW")
       :desc "Launch ERC with TLS connection" "E" #'erc-tls))

(setq erc-prompt                  (lambda () (concat "[" (buffer-name) "]"))
      erc-server                  "irc.libera.chat"
      erc-nick                    "erickisos"
      erc-user-full-name          "Erick Isos"
      erc-track-shorten-start     24
      erc-autojoin-channels-alist '(("irc.libera.chat"
                                     "#archlinux"
                                     "#linux"
                                     "#emacs"
                                     "#pyar"))
      erc-kill-buffer-on-part     t
      erc-fill-column             200
      erc-fill-function           'erc-fill-static
      erc-fill-static-center      16)
#+end_src

* Nubank Config file

And last but not least, given that we are actively moving between a personal computer and the Nubank computer, I've added the next line to the main config.
#+begin_src emacs-lisp :tangle ../.doom.d/config.el
(load! "nubank")
#+end_src
